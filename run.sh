#!/bin/bash

set -e
if [ -z ${RMG+x} ]; then 
	echo "RMG variable is unset. Exiting..."
	exit 0
fi

echo "Running $1 example"

# make folder for models generated by the benchmark version of RMG-Py/RMG-database:
mkdir -p testing/benchmark/$1
rm -rf testing/benchmark/$1/*
cp examples/rmg/$1/input.py testing/benchmark/$1/input.py
source activate benchmark
echo "Version of RMG: $HOME/miniconda/envs/benchmark/bin"
python $HOME/miniconda/envs/benchmark/bin/rmg.py testing/benchmark/$1/input.py > /dev/null

# make folder for models generated by the test version of RMG-Py and RMG-database:
mkdir -p testing/testmodel/$1
rm -rf testing/testmodel/$1/*
cp examples/rmg/$1/input.py testing/testmodel/$1/input.py
echo "Version of RMG: $RMG"
source activate tested
PYTHONPATH=$RMG:$PYTHONPATH python $RMG/rmg.py testing/testmodel/$1/input.py > /dev/null

# compare both generated models
source activate benchmark
bash check.sh $1 testing/benchmark/$1 testing/testmodel/$1

# make folder for models generated by the test version of RMG-Py and RMG-database, with scoop enabled:
mkdir -p testing/testmodel/$1/scoop
rm -rf testing/testmodel/$1/scoop/*
cp examples/rmg/$1/input.py testing/testmodel/$1/scoop/input.py
echo "Version of RMG running with SCOOP: $RMG"
source activate tested
python -m scoop -n 1 $RMG/rmg.py testing/testmodel/$1/scoop/input.py > /dev/null

# compare both generated models
source activate benchmark
bash check.sh $1 testing/benchmark/$1 testing/testmodel/$1/scoop